unit uMultaModel;

interface

uses
  uEnumerado, FireDAC.Comp.Client;

type
  TMultaModel = class

  private
    FAcao: TAcao;

    FIdLivro: string;
    FIdUsuario: string;
    FData: string;
    FHora: string;
    FOrigem: string;
    FDestino: string;

    procedure SetAcao(const Value: TAcao);

    procedure setData(const Value: string);
    procedure setLivro(const Value: string);
    procedure setUsuario(const Value: string);
    procedure setDestino(const Value: string);

    function Buscar: TFDQuery;
    procedure setHora(const Value: string);

  public

    function Obter: TFDQuery;
    function ObterSelecionadas(Cpf: string): TFDQuery;
    function Salvar: Boolean;

    property IdLivro: string read FIdLivro write setLivro;
    property IdUsuario: string read FIdUsuario write setUsuario;
    property Data: string read FData write setData;
    property Hora: string read FHora write setHora;
    property Destino: string read FDestino write setDestino;

    property Acao: TAcao read FAcao write SetAcao;
  end;

implementation

{ TLivro }

uses uMultaDao;

function TMultaModel.Buscar: TFDQuery;
begin

end;

function TMultaModel.Obter: TFDQuery;
var
  Dao: TMultaDao;
begin
  Dao := TMultaDao.Create;
  try
    Result := Dao.Obter;
  finally
    Dao.Free;
  end;
end;

function TMultaModel.Salvar: Boolean;
var
  Dao: TMultaDao;
begin
  Result := False;

  Dao := TMultaDao.Create;
  try
    case FAcao of
      uEnumerado.tacIncluir:
        Result := Dao.Incluir(Self);
      uEnumerado.tacExcluir:
        Result := Dao.Excluir(Self);
    end;
  finally
    Dao.Free;
  end;
end;


procedure TMultaModel.SetAcao(const Value: TAcao);
begin
  FAcao := Value;
end;

procedure TMultaModel.setData(const Value: string);
begin
  FData := Value;
end;

procedure TMultaModel.setDestino(const Value: string);
begin
  FDestino := Value;
end;

procedure TMultaModel.setHora(const Value: string);
begin
  FHora := Value;
end;

procedure TMultaModel.setLivro(const Value: string);
begin
  FIdLivro := Value;
end;

procedure TMultaModel.setUsuario(const Value: string);
begin
 FIdUsuario := Value;
end;

function TMultaModel.ObterSelecionadas(Cpf: string): TFDQuery;
var
  Dao: TMultaDao;
begin
  Dao := TMultaDao.Create;
  try
    Result := Dao.ObterSelecionadas(Cpf);
  finally
    Dao.Free;
  end;
end;

end.
