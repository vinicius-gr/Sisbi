unit uMultaDao;

interface

uses
  FireDAC.Comp.Client, uConexao, uMultaModel, System.SysUtils,
  FireDAC.Phys.MSSQL;

type
  TMultaDao = class

  private
    FConexao: TConexao;

  public

    constructor Create;

    function Incluir(MultaModel: TMultaModel): Boolean;
    function Excluir(MultaModel: TMultaModel): Boolean;

    function Obter: TFDQuery;
    function ObterSelecionadas(IdUsuario: string): TFDQuery;
  end;

implementation

{ TMultaDao }

uses uSistemaControl, uUnidadeModel, uUsuarioModel, Vcl.Dialogs;

constructor TMultaDao.Create;
begin
  FConexao := TSistemaControl.GetInstance().Conexao;
end;

function TMultaDao.Excluir(MultaModel: TMultaModel): Boolean;
var
  VQry: TFDQuery;
begin
  VQry := FConexao.CriarQuery();
  try
    VQry.ExecSQL('DELETE FROM Multa WHERE (Id_Usuario = :idUsuario AND Id_Livro = :idLivro)', [MultaModel.IdUsuario, MultaModel.IdLivro]);
    Result := True;
  finally
    VQry.Free;
  end;
end;

function TMultaDao.Incluir(MultaModel: TMultaModel): Boolean;
var
  VQry: TFDQuery;
begin
  VQry := FConexao.CriarQuery();
  try
  try
    VQry.ExecSQL(' INSERT INTO Multa(Data, Hora, Destino, Id_Usuario, Id_Livro) VALUES (:data, :hora, :destino, :idUsuario, :idLivro ) ', [MultaModel.Data, MultaModel.Hora, MultaModel.Destino, MultaModel.IdUsuario, MultaModel.IdLivro]);
    Result := True;
  except
    on E : EMSSQLNativeException do
        MessageDlg('Unidade não cadastrada.', mtWarning, [mbOK], 0);
  end;
  finally
    VQry.Free;
  end;
end;

function TMultaDao.Obter: TFDQuery;
var
  VQry: TFDQuery;
begin
  VQry := FConexao.CriarQuery();
  VQry.Open(' SELECT * FROM Multa order by 1 ');
  Result := VQry;
end;

function TMultaDao.ObterSelecionadas(IdUsuario: string): TFDQuery;
var
  VQry: TFDQuery;
begin
  VQry := FConexao.CriarQuery();
  VQry.Open(' SELECT * FROM Multa WHERE (Id_Usuario = :idUsuario) ', [IdUsuario]);
  Result := VQry;
end;

end.
